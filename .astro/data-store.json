[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.10.2","content-config-digest","28ff8d10b8b355b9","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://mirsameerirfan.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,24,25],"using-mdx",{"id":11,"data":13,"body":18,"filePath":19,"assetImports":20,"digest":22,"deferredRender":23},{"title":14,"description":15,"pubDate":16,"heroImage":17},"Using MDX","Lorem ipsum dolor sit amet",["Date","2024-06-01T04:00:00.000Z"],"__ASTRO_IMAGE_../../assets/blog-placeholder-5.jpg","This theme comes with the [@astrojs/mdx](https://docs.astro.build/en/guides/integrations-guide/mdx/) integration installed and configured in your `astro.config.mjs` config file. If you prefer not to use MDX, you can disable support by removing the integration from your config file.\n\n## Why MDX?\n\nMDX is a special flavor of Markdown that supports embedded JavaScript & JSX syntax. This unlocks the ability to [mix JavaScript and UI Components into your Markdown content](https://docs.astro.build/en/guides/markdown-content/#mdx-features) for things like interactive charts or alerts.\n\nIf you have existing content authored in MDX, this integration will hopefully make migrating to Astro a breeze.\n\n## Example\n\nHere is how you import and use a UI component inside of MDX.  \nWhen you open this page in the browser, you should see the clickable button below.\n\nimport HeaderLink from '../../components/HeaderLink.astro';\n\n\u003CHeaderLink href=\"#\" onclick=\"alert('clicked!')\">\n\tEmbedded component in MDX\n\u003C/HeaderLink>\n\n## More Links\n\n- [MDX Syntax Documentation](https://mdxjs.com/docs/what-is-mdx)\n- [Astro Usage Documentation](https://docs.astro.build/en/guides/markdown-content/#markdown-and-mdx-pages)\n- **Note:** [Client Directives](https://docs.astro.build/en/reference/directives-reference/#client-directives) are still required to create interactive components. Otherwise, all components in your MDX will render as static HTML (no JavaScript) by default.","src/content/blog/using-mdx.mdx",[21],"../../assets/blog-placeholder-5.jpg","1df3fb646ba9601b",true,"first-post",{"id":24,"data":26,"body":31,"filePath":32,"assetImports":33,"digest":35,"rendered":36},{"title":27,"description":28,"pubDate":29,"heroImage":30},"Demystifying Dynamic Programming","Dynamic Programming: Deep Dive for JavaScript Developers",["Date","2025-07-07T04:00:00.000Z"],"__ASTRO_IMAGE_../../assets/blog-placeholder-3.jpg","# Demystifying Dynamic Programming: A Deep Dive for JavaScript Developers\n\nHey everyone, I've seen many concepts come and go. But some, like **Dynamic Programming (DP)**, are timeless pillars of efficient algorithm design. Yet, it's a topic that often sends shivers down the spines of even seasoned developers.\n\nToday, we're going to change that. My goal is to demystify Dynamic Programming, making it so clear that you'll not only understand it but also be able to wield its power in your JavaScript projects. So, grab your favorite beverage, settle in, and let's unravel the elegance of DP together. ☕\n\n---\n\n## What in the World is Dynamic Programming?\n\nAt its core, Dynamic Programming is a method for solving complex problems by breaking them down into simpler, overlapping subproblems. The key idea is to solve each subproblem only once and store its result. When the same subproblem is encountered again, we simply retrieve the stored result instead of re-calculating it. This simple trick can turn a monstrously slow algorithm into a lightning-fast one.\n\nThink of it like this: imagine you're asked to calculate the 10th step of a complex dance routine. You wouldn't start from scratch every time you practice a new move, right? You'd build upon the moves you've already perfected. Dynamic Programming applies this same common-sense logic to code.\n\nFor a problem to be a good candidate for Dynamic Programming, it must exhibit two key properties:\n\n- **Overlapping Subproblems:** The problem can be broken down into subproblems that are reused several times.\n- **Optimal Substructure:** The optimal solution to the overall problem can be constructed from the optimal solutions of its subproblems.\n\n### A Little Bit of History\n\nThe term \"Dynamic Programming\" was coined by the American mathematician **Richard Bellman** in the 1950s. The name was intentionally chosen to be a bit obscure to get his research funding approved without much scrutiny. The \"programming\" part doesn't refer to writing code but to a tabular method of solving problems.\n\n---\n\n## The Two Flavors of Dynamic Programming: Memoization and Tabulation\n\nThere are two primary techniques for implementing Dynamic Programming. While they achieve the same goal, they approach the problem from different angles.\n\n### Memoization: The Top-Down Approach 🔼\n\n**Memoization** is a \"top-down\" approach. You start with the main problem and break it down recursively. As you solve each subproblem for the first time, you \"memoize\" its result by storing it in a cache (like a JavaScript object or a Map). If you encounter the same subproblem again, you just fetch the result from the cache.\n\nIt's like having a cheat sheet. You try to solve the problem, and if you've already solved a smaller piece of it, you just look up the answer.\n\n### Tabulation: The Bottom-Up Approach 🔽\n\n**Tabulation**, on the other hand, is a \"bottom-up\" approach. You start with the smallest, most basic subproblems and solve them iteratively. You then use these solutions to build up solutions to larger and more complex subproblems until you solve the main problem.\n\nThis is like building a skyscraper. You start with a strong foundation (the base cases) and then build each floor on top of the previous one until the entire structure is complete.\n\n---\n\n## Let's Get Practical: Classic DP Problems in JavaScript\n\nThe best way to truly grasp Dynamic Programming is by seeing it in action. Let's explore some classic problems and their solutions in JavaScript.\n\n### The Fibonacci Sequence: The \"Hello, World!\" of Dynamic Programming\n\nThe Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. A naive recursive solution is incredibly inefficient due to redundant calculations. Let's see how DP can save the day.\n\n#### Naive Recursive Solution (The \"Don't Do This\" Example ❌)\n\n```javascript\nfunction fibonacci(n) {\n  if (n \u003C= 1) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// This will be very slow for n > 40\nconsole.log(fibonacci(45));\n```\n\nThis solution has an exponential time complexity of O(2n), which is terrible for larger values of n.\n\n## Memoization (Top-Down)\n\n```javascript\nfunction fibonacciMemo(n, memo = {}) {\n  if (n in memo) {\n    return memo[n];\n  }\n  if (n \u003C= 1) {\n    return n;\n  }\n  memo[n] = fibonacciMemo(n - 1, memo) + fibonacciMemo(n - 2, memo);\n  return memo[n];\n}\n\nconsole.log(fibonacciMemo(45)); // Blazingly fast!\n```\n\nWith memoization, the time complexity drops to O(n) because each Fibonacci number is calculated only once.\n\n## Tabulation (Bottom-Up)\n\n```javascript\nfunction fibonacciTab(n) {\n  if (n \u003C= 1) {\n    return n;\n  }\n  const table = new Array(n + 1);\n  table[0] = 0;\n  table[1] = 1;\n  for (let i = 2; i \u003C= n; i++) {\n    table[i] = table[i - 1] + table[i - 2];\n  }\n  return table[n];\n}\n\nconsole.log(fibonacciTab(45)); // Also very fast!\n```\n\nThe tabulation approach also has a time complexity of O(n) and is often slightly more space-efficient as it avoids deep recursion stacks.\n\n### The 0/1 Knapsack Problem: The Art of Optimal Selection\n\nImagine you're a thief with a knapsack that can hold a limited weight. You're in a room full of items, each with a specific weight and value. Your goal is to maximize the total value of the items you put in your knapsack without exceeding its weight capacity. You can either take an item or leave it (the \"0/1\" part).\n\nThis is a classic optimization problem that can be solved efficiently using Dynamic Programming.\n\n## Tabulation Approach\n\n```javascript\nfunction knapsack(weights, values, capacity) {\n  const n = weights.length;\n  const dp = Array(n + 1)\n    .fill(0)\n    .map(() => Array(capacity + 1).fill(0));\n\n  for (let i = 1; i \u003C= n; i++) {\n    for (let w = 1; w \u003C= capacity; w++) {\n      if (weights[i - 1] \u003C= w) {\n        dp[i][w] = Math.max(\n          values[i - 1] + dp[i - 1][w - weights[i - 1]],\n          dp[i - 1][w]\n        );\n      } else {\n        dp[i][w] = dp[i - 1][w];\n      }\n    }\n  }\n\n  return dp[n][capacity];\n}\n\nconst weights = [1, 2, 3];\nconst values = [60, 100, 120];\nconst capacity = 5;\nconsole.log(knapsack(weights, values, capacity)); // Output: 220\n```\n\nHere, dp[i][w] represents the maximum value we can get using the first i items with a knapsack capacity of w. The time complexity is O(n\ncdotcapacity).\n\n### Longest Common Subsequence: Finding Similarities\n\nThe Longest Common Subsequence (LCS) problem involves finding the longest subsequence common to two sequences. A subsequence's elements must appear in the same order, but they don't have to be contiguous.\n\nFor example, the LCS of \"AGGTAB\" and \"GXTXAYB\" is \"GTAB\". This has applications in bioinformatics (comparing DNA sequences) and version control systems (like Git's diff).\n\n## Tabulation Approach\n\n```javascript\nfunction longestCommonSubsequence(text1, text2) {\n  const m = text1.length;\n  const n = text2.length;\n  const dp = Array(m + 1)\n    .fill(0)\n    .map(() => Array(n + 1).fill(0));\n\n  for (let i = 1; i \u003C= m; i++) {\n    for (let j = 1; j \u003C= n; j++) {\n      if (text1[i - 1] === text2[j - 1]) {\n        dp[i][j] = 1 + dp[i - 1][j - 1];\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[m][n];\n}\n\nconst text1 = \"AGGTAB\";\nconst text2 = \"GXTXAYB\";\nconsole.log(longestCommonSubsequence(text1, text2)); // Output: 4\n```\n\nThe time complexity for this solution is O(mcdotn), where m and n are the lengths of the two strings.\n\n# Real-World Applications of Dynamic Programming\n\nDynamic Programming isn't just for coding interviews. It's a powerful tool used in a variety of real-world applications:\n\n- **File Comparison and Diffing**  \n  Utilities like `diff` use DP to find the differences between files, which is fundamental to version control systems like Git.\n\n- **Bioinformatics**  \n  Aligning DNA, RNA, and protein sequences to find similarities and evolutionary relationships relies heavily on DP algorithms.\n\n- **Natural Language Processing (NLP)**  \n  Algorithms for tasks like spell-checking, text summarization, and machine translation often employ DP techniques.\n\n- **Financial Modeling**  \n  Used in portfolio optimization to make decisions that maximize returns over time.\n\n- **Image Processing**  \n  Content-aware image resizing algorithms use DP to intelligently remove or add pixels.\n\n- **Shortest Path Algorithms**  \n  In networking and mapping, DP is used to find the shortest path between two points (e.g., the Floyd-Warshall algorithm).\n\n# Final Thoughts: Embrace the Power of DP\n\nDynamic Programming is more than just an algorithmic technique; it's a way of thinking. It teaches us to break down complex problems into manageable pieces and to be efficient by reusing our work. While the initial learning curve can be steep, the rewards in terms of algorithmic performance and problem-solving skills are immense.\n\n**My advice to you is to practice.**  \nTake these classic problems and try to implement them from scratch. Then, look for other DP problems and try to solve them using both memoization and tabulation. The more you practice, the more intuitive it will become.\n\nSo, the next time you face a problem with overlapping subproblems and optimal substructure, you'll know exactly what to do. You'll have the power of Dynamic Programming in your developer toolkit, ready to write more elegant and efficient code.\n\n**Happy coding!**","src/content/blog/first-post.md",[34],"../../assets/blog-placeholder-3.jpg","f5a7d92249c54bfb",{"html":37,"metadata":38},"\u003Ch1 id=\"demystifying-dynamic-programming-a-deep-dive-for-javascript-developers\">Demystifying Dynamic Programming: A Deep Dive for JavaScript Developers\u003C/h1>\n\u003Cp>Hey everyone, I’ve seen many concepts come and go. But some, like \u003Cstrong>Dynamic Programming (DP)\u003C/strong>, are timeless pillars of efficient algorithm design. Yet, it’s a topic that often sends shivers down the spines of even seasoned developers.\u003C/p>\n\u003Cp>Today, we’re going to change that. My goal is to demystify Dynamic Programming, making it so clear that you’ll not only understand it but also be able to wield its power in your JavaScript projects. So, grab your favorite beverage, settle in, and let’s unravel the elegance of DP together. ☕\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"what-in-the-world-is-dynamic-programming\">What in the World is Dynamic Programming?\u003C/h2>\n\u003Cp>At its core, Dynamic Programming is a method for solving complex problems by breaking them down into simpler, overlapping subproblems. The key idea is to solve each subproblem only once and store its result. When the same subproblem is encountered again, we simply retrieve the stored result instead of re-calculating it. This simple trick can turn a monstrously slow algorithm into a lightning-fast one.\u003C/p>\n\u003Cp>Think of it like this: imagine you’re asked to calculate the 10th step of a complex dance routine. You wouldn’t start from scratch every time you practice a new move, right? You’d build upon the moves you’ve already perfected. Dynamic Programming applies this same common-sense logic to code.\u003C/p>\n\u003Cp>For a problem to be a good candidate for Dynamic Programming, it must exhibit two key properties:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Overlapping Subproblems:\u003C/strong> The problem can be broken down into subproblems that are reused several times.\u003C/li>\n\u003Cli>\u003Cstrong>Optimal Substructure:\u003C/strong> The optimal solution to the overall problem can be constructed from the optimal solutions of its subproblems.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"a-little-bit-of-history\">A Little Bit of History\u003C/h3>\n\u003Cp>The term “Dynamic Programming” was coined by the American mathematician \u003Cstrong>Richard Bellman\u003C/strong> in the 1950s. The name was intentionally chosen to be a bit obscure to get his research funding approved without much scrutiny. The “programming” part doesn’t refer to writing code but to a tabular method of solving problems.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"the-two-flavors-of-dynamic-programming-memoization-and-tabulation\">The Two Flavors of Dynamic Programming: Memoization and Tabulation\u003C/h2>\n\u003Cp>There are two primary techniques for implementing Dynamic Programming. While they achieve the same goal, they approach the problem from different angles.\u003C/p>\n\u003Ch3 id=\"memoization-the-top-down-approach\">Memoization: The Top-Down Approach 🔼\u003C/h3>\n\u003Cp>\u003Cstrong>Memoization\u003C/strong> is a “top-down” approach. You start with the main problem and break it down recursively. As you solve each subproblem for the first time, you “memoize” its result by storing it in a cache (like a JavaScript object or a Map). If you encounter the same subproblem again, you just fetch the result from the cache.\u003C/p>\n\u003Cp>It’s like having a cheat sheet. You try to solve the problem, and if you’ve already solved a smaller piece of it, you just look up the answer.\u003C/p>\n\u003Ch3 id=\"tabulation-the-bottom-up-approach\">Tabulation: The Bottom-Up Approach 🔽\u003C/h3>\n\u003Cp>\u003Cstrong>Tabulation\u003C/strong>, on the other hand, is a “bottom-up” approach. You start with the smallest, most basic subproblems and solve them iteratively. You then use these solutions to build up solutions to larger and more complex subproblems until you solve the main problem.\u003C/p>\n\u003Cp>This is like building a skyscraper. You start with a strong foundation (the base cases) and then build each floor on top of the previous one until the entire structure is complete.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"lets-get-practical-classic-dp-problems-in-javascript\">Let’s Get Practical: Classic DP Problems in JavaScript\u003C/h2>\n\u003Cp>The best way to truly grasp Dynamic Programming is by seeing it in action. Let’s explore some classic problems and their solutions in JavaScript.\u003C/p>\n\u003Ch3 id=\"the-fibonacci-sequence-the-hello-world-of-dynamic-programming\">The Fibonacci Sequence: The “Hello, World!” of Dynamic Programming\u003C/h3>\n\u003Cp>The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. A naive recursive solution is incredibly inefficient due to redundant calculations. Let’s see how DP can save the day.\u003C/p>\n\u003Ch4 id=\"naive-recursive-solution-the-dont-do-this-example\">Naive Recursive Solution (The “Don’t Do This” Example ❌)\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">n\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// This will be very slow for n > 40\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">45\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This solution has an exponential time complexity of O(2n), which is terrible for larger values of n.\u003C/p>\n\u003Ch2 id=\"memoization-top-down\">Memoization (Top-Down)\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacciMemo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">n\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">memo\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> memo) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> memo[n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  memo[n] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacciMemo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, memo) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacciMemo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, memo);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> memo[n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">fibonacciMemo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">45\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Blazingly fast!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>With memoization, the time complexity drops to O(n) because each Fibonacci number is calculated only once.\u003C/p>\n\u003Ch2 id=\"tabulation-bottom-up\">Tabulation (Bottom-Up)\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacciTab\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">n\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> table\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  table[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  table[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    table[i] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> table[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> table[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> table[n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">fibonacciTab\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">45\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Also very fast!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The tabulation approach also has a time complexity of O(n) and is often slightly more space-efficient as it avoids deep recursion stacks.\u003C/p>\n\u003Ch3 id=\"the-01-knapsack-problem-the-art-of-optimal-selection\">The 0/1 Knapsack Problem: The Art of Optimal Selection\u003C/h3>\n\u003Cp>Imagine you’re a thief with a knapsack that can hold a limited weight. You’re in a room full of items, each with a specific weight and value. Your goal is to maximize the total value of the items you put in your knapsack without exceeding its weight capacity. You can either take an item or leave it (the “0/1” part).\u003C/p>\n\u003Cp>This is a classic optimization problem that can be solved efficiently using Dynamic Programming.\u003C/p>\n\u003Ch2 id=\"tabulation-approach\">Tabulation Approach\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> knapsack\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">weights\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">values\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">capacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> n\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> weights.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">fill\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(capacity \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">fill\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> w \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; w \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> capacity; w\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (weights[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> w) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        dp[i][w] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          values[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dp[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][w \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> weights[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          dp[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][w]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        dp[i][w] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dp[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][w];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dp[n][capacity];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> weights\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> values\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">60\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">120\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> capacity\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">knapsack\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(weights, values, capacity)); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Output: 220\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here, dp[i][w] represents the maximum value we can get using the first i items with a knapsack capacity of w. The time complexity is O(n\ncdotcapacity).\u003C/p>\n\u003Ch3 id=\"longest-common-subsequence-finding-similarities\">Longest Common Subsequence: Finding Similarities\u003C/h3>\n\u003Cp>The Longest Common Subsequence (LCS) problem involves finding the longest subsequence common to two sequences. A subsequence’s elements must appear in the same order, but they don’t have to be contiguous.\u003C/p>\n\u003Cp>For example, the LCS of “AGGTAB” and “GXTXAYB” is “GTAB”. This has applications in bioinformatics (comparing DNA sequences) and version control systems (like Git’s diff).\u003C/p>\n\u003Ch2 id=\"tabulation-approach-1\">Tabulation Approach\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> longestCommonSubsequence\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">text1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">text2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> m\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text1.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> n\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text2.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(m \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">fill\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">fill\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> m; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; j \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n; j\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (text1[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text2[j \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        dp[i][j] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dp[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][j \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        dp[i][j] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(dp[i \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][j], dp[i][j \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dp[m][n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> text1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"AGGTAB\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> text2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"GXTXAYB\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">longestCommonSubsequence\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text1, text2)); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Output: 4\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The time complexity for this solution is O(mcdotn), where m and n are the lengths of the two strings.\u003C/p>\n\u003Ch1 id=\"real-world-applications-of-dynamic-programming\">Real-World Applications of Dynamic Programming\u003C/h1>\n\u003Cp>Dynamic Programming isn’t just for coding interviews. It’s a powerful tool used in a variety of real-world applications:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>File Comparison and Diffing\u003C/strong>\u003Cbr>\nUtilities like \u003Ccode>diff\u003C/code> use DP to find the differences between files, which is fundamental to version control systems like Git.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Bioinformatics\u003C/strong>\u003Cbr>\nAligning DNA, RNA, and protein sequences to find similarities and evolutionary relationships relies heavily on DP algorithms.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Natural Language Processing (NLP)\u003C/strong>\u003Cbr>\nAlgorithms for tasks like spell-checking, text summarization, and machine translation often employ DP techniques.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Financial Modeling\u003C/strong>\u003Cbr>\nUsed in portfolio optimization to make decisions that maximize returns over time.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Image Processing\u003C/strong>\u003Cbr>\nContent-aware image resizing algorithms use DP to intelligently remove or add pixels.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Shortest Path Algorithms\u003C/strong>\u003Cbr>\nIn networking and mapping, DP is used to find the shortest path between two points (e.g., the Floyd-Warshall algorithm).\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"final-thoughts-embrace-the-power-of-dp\">Final Thoughts: Embrace the Power of DP\u003C/h1>\n\u003Cp>Dynamic Programming is more than just an algorithmic technique; it’s a way of thinking. It teaches us to break down complex problems into manageable pieces and to be efficient by reusing our work. While the initial learning curve can be steep, the rewards in terms of algorithmic performance and problem-solving skills are immense.\u003C/p>\n\u003Cp>\u003Cstrong>My advice to you is to practice.\u003C/strong>\u003Cbr>\nTake these classic problems and try to implement them from scratch. Then, look for other DP problems and try to solve them using both memoization and tabulation. The more you practice, the more intuitive it will become.\u003C/p>\n\u003Cp>So, the next time you face a problem with overlapping subproblems and optimal substructure, you’ll know exactly what to do. You’ll have the power of Dynamic Programming in your developer toolkit, ready to write more elegant and efficient code.\u003C/p>\n\u003Cp>\u003Cstrong>Happy coding!\u003C/strong>\u003C/p>",{"headings":39,"localImagePaths":94,"remoteImagePaths":95,"frontmatter":96,"imagePaths":98},[40,44,48,52,55,58,61,64,67,71,74,77,80,83,86,88,91],{"depth":41,"slug":42,"text":43},1,"demystifying-dynamic-programming-a-deep-dive-for-javascript-developers","Demystifying Dynamic Programming: A Deep Dive for JavaScript Developers",{"depth":45,"slug":46,"text":47},2,"what-in-the-world-is-dynamic-programming","What in the World is Dynamic Programming?",{"depth":49,"slug":50,"text":51},3,"a-little-bit-of-history","A Little Bit of History",{"depth":45,"slug":53,"text":54},"the-two-flavors-of-dynamic-programming-memoization-and-tabulation","The Two Flavors of Dynamic Programming: Memoization and Tabulation",{"depth":49,"slug":56,"text":57},"memoization-the-top-down-approach","Memoization: The Top-Down Approach 🔼",{"depth":49,"slug":59,"text":60},"tabulation-the-bottom-up-approach","Tabulation: The Bottom-Up Approach 🔽",{"depth":45,"slug":62,"text":63},"lets-get-practical-classic-dp-problems-in-javascript","Let’s Get Practical: Classic DP Problems in JavaScript",{"depth":49,"slug":65,"text":66},"the-fibonacci-sequence-the-hello-world-of-dynamic-programming","The Fibonacci Sequence: The “Hello, World!” of Dynamic Programming",{"depth":68,"slug":69,"text":70},4,"naive-recursive-solution-the-dont-do-this-example","Naive Recursive Solution (The “Don’t Do This” Example ❌)",{"depth":45,"slug":72,"text":73},"memoization-top-down","Memoization (Top-Down)",{"depth":45,"slug":75,"text":76},"tabulation-bottom-up","Tabulation (Bottom-Up)",{"depth":49,"slug":78,"text":79},"the-01-knapsack-problem-the-art-of-optimal-selection","The 0/1 Knapsack Problem: The Art of Optimal Selection",{"depth":45,"slug":81,"text":82},"tabulation-approach","Tabulation Approach",{"depth":49,"slug":84,"text":85},"longest-common-subsequence-finding-similarities","Longest Common Subsequence: Finding Similarities",{"depth":45,"slug":87,"text":82},"tabulation-approach-1",{"depth":41,"slug":89,"text":90},"real-world-applications-of-dynamic-programming","Real-World Applications of Dynamic Programming",{"depth":41,"slug":92,"text":93},"final-thoughts-embrace-the-power-of-dp","Final Thoughts: Embrace the Power of DP",[],[],{"title":27,"description":28,"pubDate":97,"heroImage":34},"Jul 07 2025",[]]